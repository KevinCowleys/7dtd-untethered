worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	gzip_static on;

    #gzip  on;

    server {
        listen       443 ssl;
        server_name  api.epicgames.dev;
		
		default_type application/json;
		
		ssl_certificate      public.crt;
		ssl_certificate_key  public.key;

		ssl_session_cache    shared:SSL:1m;
		ssl_session_timeout  5m;

		ssl_ciphers  HIGH:!aNULL:!MD5;
		
		# default and product links use same json
		location /sdk/v1/default {
			add_header Content-Disposition 'filename="default"';
			alias html/product.json;
		}
		
		# default and product links use same json
		location ~ /sdk/v1/product/(.*?) {
			alias html/product.json;
		}
		
		location /auth/v1/oauth/token {
			lua_need_request_body on;
			error_page 405 =200 /oauth.json;
			alias html/oauth.json;
			access_by_lua_block {
				ngx.req.read_body()
				local data = ngx.req.get_body_data()
				local match = ngx.re.match(ngx.var.request_body, "steam_encrypted_appticket")
				if match then
					local jsonstuff = [[{"errorCode":"errors.com.epicgames.eos.auth.user_not_found","errorMessage":"EOS User Identity not found.","numericErrorCode":110016,"originatingService":"eos-auth-service","intent":"prod","nonce":"replace_me","continuation_token":"fails_without","expires_at":"2022-01-08T16:47:23.940Z","expires_in":1799}]]
					local nonce_old = jsonstuff:match('"nonce"%s*:%s*"(.-)"');
					local nonce_new = data:match('nonce=(.*)');
					jsonstuff = string.gsub(jsonstuff, nonce_old, nonce_new)
					ngx.status = 404
					ngx.header["Content-Length"] = string.len(jsonstuff)
					ngx.header["X-Epic-Correlation-Id"] = ngx.req.get_headers()["X-Epic-Correlation-Id"]
					ngx.header["X-Epic-Error-Code"] = "110016"
					ngx.header["X-Epic-Error-Name"] = "errors.com.epicgames.eos.auth.user_not_found"
					ngx.print(jsonstuff)
					ngx.exit(ngx.OK)
				end
			}
		}
		
		location /datarouter/api/v1/public/data/clients {
			return 200 '{}';
		}
		
		location /auth/v1/users {
			error_page 404 =200 /users.json;
		}
		
		# For server auth
		location /auth/v1/oauth/jwks {
			alias html/jwks.json;
		}
    }
}
